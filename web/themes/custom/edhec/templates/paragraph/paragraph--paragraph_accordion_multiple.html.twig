{#
/**
* @file
* A11Y Paragraphs Tab Wrapper paragraph template.
*
* Available variables:
* - paragraph: Full paragraph entity.
* Only method names starting with "get", "has", or "is" and a few common
* methods such as "id", "label", and "bundle" are available. For example:
* - paragraph.getCreatedTime() will return the paragraph creation timestamp.
* - paragraph.id(): The paragraph ID.
* - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
* - paragraph.getOwnerId(): The user ID of the paragraph author.
* See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
* and methods for the paragraph object.
* - content: All paragraph items. Use {{ content }} to print them all,
* or print a subset such as {{ content.field_example }}. Use
* {{ content|without('field_example') }} to temporarily suppress the printing
* of a given child element.
* - content.field_a11y_para_tabs_sec_title: Formatted Text field used for the Section Title.
* - content.field_a11y_para_tabs_tabs_panel: Paragraph Reference Field used to reference the Tabs Panel paragraph.
* - content.field_a11y_para_tabs_tab_title: Formatted Text field used for the Tab panel Title.
* - content.field_a11y_para_tabs_tab_content: Paragraph Reference Field used to reference the Tab Content paragraph.
* - content.field_a11y_para_tabs_text_area: Text Formatted Long field used for adding text.
* - attributes: HTML attributes for the containing element.
* The attributes.class element may contain one or more of the following
* classes:
* - paragraphs: The current template type (also known as a "theming hook").
* - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
* "Image" it would result in "paragraphs--type--image". Note that the machine
* name will often be in a short form of the human readable label.
* - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
* preview would result in: "paragraphs--view-mode--preview", and
* default: "paragraphs--view-mode--default".
* - view_mode: View mode; for example, "preview" or "full".
* - logged_in: Flag for authenticated user status. Will be true when the
* current user is a logged-in member.
* - is_admin: Flag for admin user status. Will be true when the current user
* is an administrator.
*
*/
#}
{# Sets Unique ID for Accordion from Paragraph ID. #}
{% set section_id = 'section' ~ paragraph.id.value %}
{% set tab_id = 'tab' ~ paragraph.id.value %}
{% block paragraph %}
{% block content %}
{# Loops through the tab sections again to print the tab section bodies. #}
<div id="ancre-{{paragraph.id.value}}"  class="paragraph paragraph--type--paragraph_accordion_multiple reveal p-50 paragraph--view-mode--default fond fond-{{ paragraph.field_fond.value }}">
    <div class="container p-mb-0">
        {% if paragraph.field_entete.value is not empty %}
              <div class="col-12 blc_entete_ pb-3">
                {{ content.field_entete }}
              </div>
        {% endif %}
        <div class="accordion" id="accordion{{ section_id }}">
            {% for key, item in content.field_single_accordion if key|first != '#' %}
            <div class="accordion-item">
                <div class="h2 accordion-header" id="heading-{{ section_id }}-{{ key + 1 }}">
                    <button class="accordion-button collapsed {#% if key != 0 %} collapsed {% endif %#}" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-{{ section_id }}-{{ key + 1 }}" aria-expanded="false" aria-controls="collapse-{{ section_id }}-{{ key + 1 }}">
                        {{ item['#paragraph'].field_title_accordion.value }}
                    </button>
                </div>
                <div id="collapse-{{ section_id }}-{{ key + 1 }}" class="accordion-collapse collapse {#% if key == 0 %} show {% endif %#}" aria-labelledby="heading-{{ section_id }}-{{ key + 1 }}" data-bs-parent="#accordion{{ section_id }}">
                    <div class="accordion-body pt-0">
                        {{ item }}
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
            {% if paragraph.field_footer.value is not empty %}
              <div class="col-12 _blc_footer pt-3">
                {{ content.field_footer }}
              </div>
            {% endif %}
    </div>
</div>
{% endblock %}
{% endblock paragraph %}