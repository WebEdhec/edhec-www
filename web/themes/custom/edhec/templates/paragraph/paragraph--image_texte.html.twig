{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph reveal',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% block paragraph %}

  {% if paragraph.field_position.value != 2 %}
   <div id="ancre-{{paragraph.id.value}}"  class="paragraph paragraph--type--image-text p-50 paragraph--view-mode--default fond-{{ paragraph.field_fond_section.value }}">
   <div class="container p-0 coin-3 paragraph fond fond-{{ paragraph.field_fond.value }}">
  {% else %}
<div id="ancre-{{paragraph.id.value}}"  class="paragraph paragraph--type--image-text  p-0 paragraph--view-mode--default ">
   <div class="container-fluid p-0 {% if (paragraph.field_position.value) != 2 %} coin-3 {% endif %} paragraph fond fond-{{ paragraph.field_fond.value }}">
   {% endif %}


    {% block content %}
    <div class="row m-0">
    {% if paragraph.field_position.value == 0 %}
        <div class="col-lg-6 col-12 p-0 m-0 height-mg-desc align-self-top position-{{ paragraph.field_position.value }}">{{ content.field_image }}</div>    
        <div class="col-lg-6 col-12 p-50 m-0 align-self-top">{{ content.field_texte }}</div>
    {% elseif paragraph.field_position.value == 1 %}
        <div class="col-lg-6 col-12 p-50 m-0 align-self-top order-mobile-2 ">{{ content.field_texte }}</div>  
        <div class="col-lg-6 col-12 p-0 m-0 height-mg-desc align-self-top order-mobile-1 position-{{ paragraph.field_position.value }}">{{ content.field_image }}</div>      
    {% else %}

      <div class="container-fluid p-0">
        <div class="col-12 p-50 pe-0 ps-0 align-self-top position-relative position-{{ paragraph.field_position.value }}" style="background: url({{ file_url(paragraph.field_image.entity.field_media_image.entity.fileuri) }});background-size: cover;height: {{ paragraph.field_image.entity.field_media_image.value.0.height }}px;background-position: center;">
        <div class="container p-0">
            <div class="w-100 reveal">
              {{ content.field_texte }}   
            </div>       
          </div>
        </div>
      </div> 

    {% endif %}   
    </div>
    {% endblock %}
   </div>

  </div>
{% endblock paragraph %}
