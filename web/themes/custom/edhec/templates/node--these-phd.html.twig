{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 */
#}
{%
  set classes = [
    'node position-relative',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}
{{ attach_library('classy/node') }}
<article{{ attributes.addClass(classes) }}>
    <div class="node__content">
      {# <div class="hero hero-interne">#}
          
      {#</div>#}
      <div class="hero-no-img fond-1 p-50 pb-4">
        <div class="container w-990 pe-xl-0 ps-xl-0 pb-0 mb-3 pt-4">
        <div class="menu-parent mt-0 pe-0 ms-0 me-0 mb-4">
            <a href="{{'/theses'|trans}}">{{"Return"|trans}}</a> 
        </div>
        {#<div class="row">#}
          <div class="theses-infos p-0 mb-4">
              {% if content.field_type|field_value!="" %}{{ content.field_type }} {% endif%} 
          </div>
        {#</div>#}
        <h1 class="h2">{{ label }}</h1>
        </div>
      </div>
      
    <div class="container w-990 pe-xl-0 ps-xl-0 mb-3 p-50">
        {#<div class="only-mobile">#}
        {#    <div class="container w-990 p-50 pe-xl-0 ps-xl-0 pb-0 mb-3">#}
        {#    <div class="menu-parent mt-0 pe-0 ms-0 me-0 mb-4">#}
        {#        <a href="/theses">{{"Return"|trans}}</a> #}
        {#    </div>#}
        {#      <div class="theses-infos p-0 mb-4">#}
        {#          {% if content.field_type|field_value!="" %}{{ content.field_type }} {% endif%} #}
        {#      </div>#}
        {#    <h1>{{ label }}</h1>#}
        {#    </div>#}
        {#</div>#}
        <div class="actualites-image mb-4">
          {{ content.field_header }}
        </div>
        <div class="d-flex author-container mb-2">
        <span class="author-label">{{'Author(s): '|trans}}</span><span class="author-name">{{ content.field_auteurs_externe }}</span>
        </div>
        <div class="d-flex keywords-container mb-4">
        <span class="keyword-label">{{'Keywords: '|trans}}</span><span class="keywords-value">{{ content.field_keywords }}</span>
        </div>
        <div class="abstract-container mb-4">
          <h2 class="abstract-label mb-2">{{'Abstract :'|trans}}</h2>
          {{ content.field_abstract2 }}
        </div>
    </div>
        <div class="container-fluid fond-1">
          <div class="container w-990 pe-xl-0 ps-xl-0 pb-4 mb-3 pt-4 p-50">
            <div class="date-container mb-4">
              <div class="mb-2">
                <span class="date-label">{{ source(directory ~ '/img/calendrier.svg') }} {{' Date de publication de la thèse: '|trans}}</span>
              </div>
              <div class="ms-4">
                  <span class="date-value">{{ content.field_date_de_publication }}</span>
              </div>
              <hr>
            </div>
            <div class="committee-container">
            <div class="mb-2">
                <span class="committee-label">{{'Commité de thèse: '|trans}}</span>
            </div>
            <span class="committee-value">{{ content.field_comite_de_these }}</span>
          </div>
            </div>
        </div>
			{% if content.field_pdf['#items'].entity.uri.value %}
				{% set cvUrl = content.field_pdf['#items'].entity.uri.value ? file_url(content.field_pdf['#items'].entity.uri.value) %}
				{% set cvFileSize = ' - PDF ' ~ content.field_pdf['#items'].entity.filesize.value|format_bytes %}
				{% set cvIcon = 'fa-download' %}
			{% endif %}
			
        <div class="container w-990 pt-2  pb-3 p-50 ps-xl-0 ps-md-0">
			{% if cvUrl %}
			<div class="these-button-container ps-md-4 ps-xl-0">
				<a href="{{cvUrl}}" target="_blank" class="bn rouge text-uppercase">{{'Consult the thesis'|trans}}
					<i class="fa {{cvIcon}} icon" aria-hidden="true"></i>
				</a>
			</div>
			{% endif %}
        </div>

    {% for key, item in content.field_section if key|first != '#' %}
      <div class="field__item reveal">
        <div class="container p-50 pt-0 pe-xl-0 ps-xl-0 container">
          {{item}}
        </div>
       </div>
    {% endfor %}
  </div>
</article>