{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 */
#}
{%
  set classes = [
    'node position-relative',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}
{{ attach_library('classy/node') }}
<article{{ attributes.addClass(classes) }}>

  {{ title_prefix }}
  {% if label and not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {% if display_submitted %}
    <footer class="node__meta">
      {{ author_picture }}
      <div{{ author_attributes.addClass('node__submitted') }}>
        {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        {{ metadata }}
      </div>
    </footer>
  {% endif %}
    <div class="node__content bg-main-{{ content.field_fond.0 }}">
    {#{% if content.field_header_sans_image['#items'].getValue()|first.value == "0" %}#}
    {% if content['field_header_sans_image'].0['#markup'] == "0" %}
       <div class="hero hero-interne">
          {{ content.field_header }}
          <div class="menu-parent d-lg-none"></div>
        <div class="container">
          <div class="hero-description position-absolute top-50 translate-middle-y col-lg-6">
           <h1 class="pb-3"> {{node.field_display_titre.value|raw}}</h1>
            {{ content.field_chapo }}
          </div>
          <div class="sidebar-container shadow position-fixed top-50 end-0 translate-middle-y w-auto text-center">
            {% if content.field_sidebar.0 is not empty %}
              <a class="btn toggle-cta" href="#" role="button">{{'Retourner en haut de page'|trans}}</a>
            {% endif %}
            {{content.field_sidebar}}
          </div>
        </div>
        
    </div>
      {% else %}
        <div class="hero-no-img fond-2 p-50">
          <div class="container">
            <div class="hero-description-no-img text-center">
              <h1> {{node.field_display_titre.value|raw}}</h1>
              {{ content.field_chapo }}
            </div>
          </div>
        </div>
        <div class="menu-parent d-lg-none"></div>
      {% endif %}
      {% if content['field_afficher_ancres'].0['#markup'] == 'On' %}
        <div class="container pt-4 d-none d-lg-block">
          <div id="menu-ancres-container" class="shadow ps-3 pe-3">
            <div id="menu-ancres" class="menu-ancre">
              <span class="go-to-ancres">{{'Go to'|t }} :</span>
              <ul id="ancres-container" class="list-unstyled list-inline">
                {% for key, item in content.field_ancres if key|first != '#' %}
                  <li class="list-inline-item">
                    <a class="text-decoration-none" href="{{ content.field_ancres[key]['#paragraph'].fields.field_ancres_lien.value }}">
                      {{ content.field_ancres[key]['#paragraph'].fields.field_ancres_libelle.value }}
                    </a>
                  </li>
                 {% endfor %}
              </ul>
            </div>
          </div>
        </div>
      {% endif %}
      {% if content['field_afficher_ancres'].0['#markup'] == 'On' %}
          <div class="container pt-0 d-lg-none">
              <div class="dropdown ancres">
                <button class="btn btn-secondary dropdown-toggle col-12 rounded-0 border-0" type="button" id="dropdownMenu2" data-bs-toggle="dropdown" aria-expanded="false">
                  {{'Go to'|t }} : <span></span>
                </button>
                <ul ul class="dropdown-menu  col-12 border-0" aria-labelledby="dropdownMenu2">
                  {% for key, item in content.field_ancres if key|first != '#' %}
                  <li>
                    <a class="text-decoration-none dropdown-item" href="{{ content.field_ancres[key]['#paragraph'].fields.field_ancres_lien.value }}">
                        {{ content.field_ancres[key]['#paragraph'].fields.field_ancres_libelle.value }}
                    </a>
                  </li>
                 {% endfor %}
                </ul>
              </div>
        </div>
      {% endif %}
    {#{ content.field_section }#}

    {% for key, item in content.field_section if key|first != '#' %}
                  <div class="field__item reveal">
                    {{item}}
                 </div>
    {% endfor %}

  </div>

</article>